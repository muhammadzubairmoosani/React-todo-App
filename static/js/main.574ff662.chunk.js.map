{"version":3,"sources":["Components/TodoInput.js","Components/TodoItem.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","React","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","id","App","state","uuid","e","setState","target","preventDefault","newItem","updateItems","filteredItems","filter","selectedItems","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.574ff662.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class TodoInput extends React.Component {\n    render() {\n        const { item, handleChange, handleSubmit, editItem } = this.props;\n        return (\n            <div className='card card-body my-3'>\n                <form onSubmit={handleSubmit}>\n                    <div className='input-group'>\n                        <div className='input-group-prepend'>\n                            <div className=\"input-group-text bg-primary text-white\">\n                                <i className='fas fa-book'></i>\n                            </div>\n                        </div>\n                        <input\n                            type='text'\n                            className='form-control text-capitalize'\n                            placeholder='add a todo item'\n                            value={item}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    <button\n                        type='submit'\n                        className={\n                            editItem\n                                ? 'btn btn-block btn-success mt-3 text-capitalize'\n                                : 'btn btn-block btn-primary mt-3 text-capitalize'\n                        }\n                    >\n                        {editItem ? 'edit item' : 'add item'}\n                    </ button>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n    render() {\n        const { title, handleDelete, handleEdit } = this.props;\n        return (\n            <li className='list-group-item text-capitalize my-2 d-flex justify-content-between'>\n                <h6>{title}</h6>\n                <div className='todo-icon'>\n                    <span className='mx-2 text-success' onClick={handleEdit}>\n                        <i className='fas fa-pen'></i>\n                    </span>\n                    <span className='mx-2 text-danger' onClick={handleDelete}>\n                        <i className='fas fa-trash'></i>\n                    </span>\n                </div>\n            </li>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport TodoItem from './TodoItem';\nexport default class TodoList extends Component {\n    render() {\n        const { items, clearList, handleDelete, handleEdit } = this.props;\n        return (\n            <ul className='list-group mt-5'>\n                <h3 className='text-center text-capitalize'>\n                    todo list\n                </h3>\n                {items.map(item => {\n                    return (\n                        <TodoItem\n                            key={item.id}\n                            title={item.title}\n                            handleDelete={() => handleDelete(item.id)}\n                            handleEdit={() => handleEdit(item.id)}\n                        />\n                    );\n                })}\n                <button\n                    type='button'\n                    className='btn btn-danger btn-block text-capitalize mt-5'\n                    onClick={clearList}\n                >\n                    clear list\n                </button>\n            </ul>\n        );\n    }\n}\n","import React from 'react';\nimport TodoInput from './Components/TodoInput';\nimport TodoList from './Components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  }\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    }\n    const updateItems = [...this.state.items, newItem];\n    this.setState({\n      items: updateItems,\n      item: '',\n      id: uuid(),\n      editItem: false\n    });\n  }\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  }\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  }\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    const selectedItems = this.state.items.find(item => item.id === id);\n    this.setState({\n      items: filteredItems,\n      item: selectedItems.title,\n      editItem: true,\n      id: id\n    });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"mx-auto col-md-8 col-lg-6 col-xl-6 mt-4\">\n            <h3 className='text-capitalize text-center'>todo input</h3>\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <TodoList\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}