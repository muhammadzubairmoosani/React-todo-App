{"version":3,"sources":["Components/TodoInput.js","Components/TodoItem.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","React","Component","render","item","handleChange","handleSubmit","editItem","this","props","_jsx","className","children","_jsxs","onSubmit","type","placeholder","value","onChange","disabled","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","length","map","id","App","constructor","arguments","state","uuid","e","setState","target","preventDefault","newItem","updateItems","filteredItems","filter","selectedItems","find","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1caa6615.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class TodoInput extends React.Component {\n  render() {\n    const { item, handleChange, handleSubmit, editItem } = this.props;\n    return (\n      <div className=\"card card-body my-3\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text bg-primary text-white\">\n                <i className=\"fas fa-book\"></i>\n              </div>\n            </div>\n            <input\n              type=\"text\"\n              className=\"form-control text-capitalize\"\n              placeholder=\"add a todo item\"\n              value={item}\n              onChange={handleChange}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            disabled={!item}\n            className={\n              editItem\n                ? \"btn btn-block btn-success mt-3 text-capitalize\"\n                : \"btn btn-block btn-primary mt-3 text-capitalize\"\n            }\n          >\n            {editItem ? \"edit item\" : \"add item\"}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n    render() {\n        const { title, handleDelete, handleEdit } = this.props;\n        return (\n            <li className='list-group-item text-capitalize my-2 d-flex justify-content-between'>\n                <h6>{title}</h6>\n                <div className='todo-icon'>\n                    <span className='mx-2 text-success' onClick={handleEdit}>\n                        <i className='fas fa-pen'></i>\n                    </span>\n                    <span className='mx-2 text-danger' onClick={handleDelete}>\n                        <i className='fas fa-trash'></i>\n                    </span>\n                </div>\n            </li>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nexport default class TodoList extends Component {\n  render() {\n    const { items, clearList, handleDelete, handleEdit } = this.props;\n    return (\n      <ul className=\"list-group mt-5\">\n        {!!items.length && (\n          <h3 className=\"text-center text-capitalize\">todo list</h3>\n        )}\n        {items.map((item) => {\n          return (\n            <TodoItem\n              key={item.id}\n              title={item.title}\n              handleDelete={() => handleDelete(item.id)}\n              handleEdit={() => handleEdit(item.id)}\n            />\n          );\n        })}\n        {items.length >= 2 && (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger btn-block text-capitalize mt-5\"\n            onClick={clearList}\n          >\n            clear list\n          </button>\n        )}\n      </ul>\n    );\n  }\n}\n","import React from \"react\";\nimport TodoInput from \"./Components/TodoInput\";\nimport TodoList from \"./Components/TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false,\n  };\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item,\n    };\n    const updateItems = [...this.state.items, newItem];\n    this.setState({\n      items: updateItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false,\n    });\n  };\n  clearList = () => {\n    this.setState({\n      items: [],\n    });\n  };\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter((item) => item.id !== id);\n    this.setState({\n      items: filteredItems,\n    });\n  };\n  handleEdit = (id) => {\n    const filteredItems = this.state.items.filter((item) => item.id !== id);\n    const selectedItems = this.state.items.find((item) => item.id === id);\n    this.setState({\n      items: filteredItems,\n      item: selectedItems.title,\n      editItem: true,\n      id: id,\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"mx-auto col-md-8 col-lg-6 col-xl-6 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Todo App</h3>\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <TodoList\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}